# This is a template gitlab-ci file for automated latex document builds.
# You need to create a project access token (role "Developer" and scopes "api, write_repository" work for me).
# In CI/CD settings under Variables the access token has to be added as "PROJECT_ACCESS_TOKEN" with Attributes "Masked", "Protected", "Expanded".
# Customize this file to your needs and change the variables below.
# Hint: for the release stage this uses alpine + glab instead of the prebuilt gitlab release-cli Docker image because of the lacking support for arm architectures

variables:
  LATEX_COMPILER: "lualatex"

stages:
  - compile
  - release

compile:
  stage: compile
  image: ghcr.io/retch/docker-texlive:2024
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - echo "A_JOB_URL=$CI_JOB_URL" >> compile.env
  script:
    - tex -v
    - $LATEX_COMPILER -syntex=1 -interaction=nonstopmode thesis.tex
    - biber thesis
    - makeglossaries thesis
    - $LATEX_COMPILER -syntex=1 -interaction=nonstopmode thesis.tex
    - cat thesis.log
  artifacts:
    expose_as: 'PDF'
    expire_in: never
    paths: ['thesis.pdf']
    reports:
      dotenv: compile.env

release:
  stage: release
  image: alpine:3.19
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: compile
      artifacts: true
  before_script:
    - apk add glab
  script:
    - echo "running release_job for $A_JOB_URL/artifacts/file/thesis.pdf"
    - glab auth login --hostname $CI_SERVER_HOST --token $PROJECT_ACCESS_TOKEN
    - >
      glab release create v$CI_PIPELINE_IID -N v$CI_PIPELINE_IID -r $CI_COMMIT_SHA -a '[{"name": "PDF", "url":"'$A_JOB_URL'/artifacts/file/thesis.pdf", "link_type": "other"}]'
